class Solution {
    private static final int MOD = 1000000007;

    public int checkRecord(int n) {
        // dp[i][j][k]: number of valid sequences of length i, with j 'A's and a trailing 'L's of length k.
        long[][][] dp = new long[n][2][3];

        // Base cases
        dp[0][0][0] = 1; // P
        dp[0][0][1] = 1; // L
        dp[0][1][0] = 1; // A

        // Building the DP table for subsequences of length i
        for (int i = 1; i < n; i++) {
            // Adding 'A' to the sequence ending without 'A's and less than 2 'L's
            dp[i][1][0] = (dp[i - 1][0][0] + dp[i - 1][0][1] + dp[i - 1][0][2]) % MOD;

            // Adding 'L' to the sequence, considering previous 'L's and 'A's
            dp[i][0][1] = dp[i - 1][0][0];                 // Previous has no trailing 'L'
            dp[i][0][2] = dp[i - 1][0][1];                 // Previous has 1 trailing 'L'
            dp[i][1][1] = dp[i - 1][1][0];                 // Previous has an 'A' and no trailing 'L'
            dp[i][1][2] = dp[i - 1][1][1];                 // Previous has an 'A' and 1 trailing 'L'

            // Adding 'P' to the sequence, considering previous 'A's and 'L's
            dp[i][0][0] = (dp[i - 1][0][0] + dp[i - 1][0][1] + dp[i - 1][0][2]) % MOD;
            dp[i][1][0] = (dp[i][1][0] + dp[i - 1][1][0] + dp[i - 1][1][1] + dp[i - 1][1][2]) % MOD;
        }

        // Sum up all valid sequences
        long ans = 0;
        for (int j = 0; j < 2; j++) {     // 0 or 1 'A's
            for (int k = 0; k < 3; k++) { // 0 to 2 trailing 'L's
                ans = (ans + dp[n - 1][j][k]) % MOD; // Aggregate counts
            }
        }
        return (int) ans; // Final answer
    }
}
