class Solution {
    public int[] relativeSortArray(int[] arr1, int[] arr2) {
      
        // Map to store the indices of elements in arr2
        Map<Integer, Integer> indexMap = new HashMap<>();
        for (int i = 0; i < arr2.length; i++) {
            indexMap.put(arr2[i], i);
        }
        
        // Custom comparator to sort arr1
        Comparator<Integer> customComparator = new Comparator<Integer>() {
            @Override
            public int compare(Integer a, Integer b) {
                // If both elements are present in arr2, compare their indices
                if (indexMap.containsKey(a) && indexMap.containsKey(b)) {
                    return indexMap.get(a) - indexMap.get(b);
                }
                // If only one element is present in arr2, it should come first
                else if (indexMap.containsKey(a)) {
                    return -1;
                } else if (indexMap.containsKey(b)) {
                    return 1;
                }
                // If neither element is present in arr2, sort them in ascending order
                else {
                    return a - b;
                }
            }
        };
        
        // Sort arr1 using the custom comparator
        Integer[] arr1Integer = Arrays.stream(arr1).boxed().toArray(Integer[]::new);
        Arrays.sort(arr1Integer, customComparator);
        
        // Convert Integer[] back to int[]
        int[] result = new int[arr1Integer.length];
        for (int i = 0; i < result.length; i++) {
            result[i] = arr1Integer[i];
        }
        
        return result;
    }
}
