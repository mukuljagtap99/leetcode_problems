class Solution {
    public boolean checkSubarraySum(int[] nums, int k) {
   HashMap<Integer, Integer> remainderIndexMap = new HashMap<>();
        remainderIndexMap.put(0, -1);

        int prefixSum = 0;

        // Traverse through each number in the array.
        for (int i = 0; i < nums.length; i++) {
            prefixSum += nums[i];

            // Calculate remainder of the prefix sum when divided by k.
            int remainder = k == 0 ? prefixSum : prefixSum % k;

            // Adjust negative remainders to ensure non-negative.
            if (remainder < 0) {
                remainder += k;
            }

            // If this remainder has been seen before, check the subarray length.
            if (remainderIndexMap.containsKey(remainder)) {
                int prevIndex = remainderIndexMap.get(remainder);
                if (i - prevIndex >= 2) {
                    return true;
                }
            } else {
                // Store the first occurrence of this remainder.
                remainderIndexMap.put(remainder, i);
            }
        }

        return false;
    }
           
}
