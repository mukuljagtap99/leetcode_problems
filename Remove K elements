class Solution {
    public String removeKdigits(String num, int k) {
        Stack<Character> stack = new Stack<>();
        
        // Iterate through each digit in num
        for (char digit : num.toCharArray()) {
            // While k > 0 and current digit is smaller than top of stack
            while (k > 0 && !stack.isEmpty() && digit < stack.peek()) {
                stack.pop(); // Remove top of stack
                k--; // Decrement k
            }
            stack.push(digit); // Push current digit onto stack
        }
        
        // Remove remaining digits if k > 0
        while (k > 0 && !stack.isEmpty()) {
            stack.pop();
            k--;
        }
        
        // Construct the smallest possible integer from digits in stack
        StringBuilder sb = new StringBuilder();
        while (!stack.isEmpty()) {
            sb.append(stack.pop());
        }
        sb.reverse(); // Reverse to get correct order
        
        // Remove leading zeroes
        while (sb.length() > 1 && sb.charAt(0) == '0') {
            sb.deleteCharAt(0);
        }
        
       return sb.length() == 0 ? "0" : sb.toString();
    }

}
