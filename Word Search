class Solution {
    public boolean exist(char[][] board, String word) {
        if (board == null || board.length == 0 || board[0].length == 0)
            return false;
        
        int m = board.length;
        int n = board[0].length;
        
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (searchWord(board, word, 0, i, j))
                    return true;
            }
        }
        return false;
    }
    
    private boolean searchWord(char[][] board, String word, int index, int row, int col) {
        if (index == word.length())
            return true;
        
        if (row < 0 || row >= board.length || col < 0 || col >= board[0].length || board[row][col] != word.charAt(index))
            return false;
        
        char temp = board[row][col];
        board[row][col] = '#'; // mark as visited
        
        // check neighbors
        boolean found = searchWord(board, word, index + 1, row - 1, col) ||
                        searchWord(board, word, index + 1, row + 1, col) ||
                        searchWord(board, word, index + 1, row, col - 1) ||
                        searchWord(board, word, index + 1, row, col + 1);
        
        board[row][col] = temp; // backtrack
        return found;
    }
}
