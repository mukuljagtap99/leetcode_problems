class Solution {
    public double mincostToHireWorkers(int[] quality, int[] wage, int k) {
        int n = quality.length;
        double[][] workers = new double[n][2];

        // Calculate the ratio of wage to quality for each worker
        for (int i = 0; i < n; i++) {
            workers[i] = new double[]{(double) wage[i] / quality[i], (double) quality[i]};
        }

        // Sort the workers by their ratio in ascending order
        Arrays.sort(workers, (a, b) -> Double.compare(a[0], b[0]));

        PriorityQueue<Double> maxHeap = new PriorityQueue<>(Collections.reverseOrder());

        double minCost = Double.MAX_VALUE;
        double sumQuality = 0.0;

        // Iterate through the workers and calculate the total quality for each group of k workers
        for (double[] worker : workers) {
            sumQuality += worker[1];
            maxHeap.offer(worker[1]);

            if (maxHeap.size() > k) {
                sumQuality -= maxHeap.poll();
            }

            if (maxHeap.size() == k) {
                minCost = Math.min(minCost, sumQuality * worker[0]);
            }
        }

        return minCost;
    }
}
