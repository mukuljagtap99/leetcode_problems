/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
   public boolean evaluateTree(TreeNode root) {
        if (root == null) {
            return false;  // Should not happen for a valid full binary tree
        }

        // If it's a leaf node
        if (root.left == null && root.right == null) {
            return root.val == 1;  // Leaf nodes have value 0 (False) or 1 (True)
        }

        // Evaluate left and right subtrees
        boolean leftValue = evaluateTree(root.left);
        boolean rightValue = evaluateTree(root.right);

        // Apply the boolean operation based on the value of the current node
        if (root.val == 2) {  // OR operation
            return leftValue || rightValue;
        } else if (root.val == 3) {  // AND operation
            return leftValue && rightValue;
        } else {
            throw new IllegalArgumentException("Invalid value in the tree node: " + root.val);
        }
    }
}
