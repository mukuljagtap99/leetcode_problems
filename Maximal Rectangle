public class Solution {
	public int maximalRectangle(char[][] matrix) {
		if (matrix == null || matrix.length == 0 || matrix[0].length == 0) {
			return 0;
		}

		int rows = matrix.length;
		int cols = matrix[0].length;
		int maxArea = 0;
		int[] heights = new int[cols];

		for (int i = 0; i < rows; i++) {
			// Update heights array for each row
			for (int j = 0; j < cols; j++) {
				if (matrix[i][j] == '1') {
					heights[j]++;
				} else {
					heights[j] = 0;
				}
			}
			// Calculate largest rectangle area for the current row
			maxArea = Math.max(maxArea, largestRectangleArea(heights));
		}

		return maxArea;
	}

	private int largestRectangleArea(int[] heights) {
		int maxArea = 0;
		int n = heights.length;
		Stack<Integer> stack = new Stack<>();

		for (int i = 0; i <= n; i++) {
			int h = (i == n) ? 0 : heights[i];
			while (!stack.isEmpty() && h < heights[stack.peek()]) {
				int height = heights[stack.pop()];
				int width = stack.isEmpty() ? i : i - stack.peek() - 1;
				maxArea = Math.max(maxArea, height * width);
			}
			stack.push(i);
		}

		return maxArea;
	}
}
