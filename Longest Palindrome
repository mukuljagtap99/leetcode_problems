class Solution {
    public int longestPalindrome(String s) {
        
        if (s == null || s.length() == 0) {
            return 0;
        }

        // Create a frequency map
        HashMap<Character, Integer> freqMap = new HashMap<>();

        // Count the frequency of each character
        for (char c : s.toCharArray()) {
            freqMap.put(c, freqMap.getOrDefault(c, 0) + 1);
        }

        int length = 0;
        boolean hasOdd = false;

        // Calculate the length of the longest palindrome
        for (int count : freqMap.values()) {
            if (count % 2 == 0) {
                length += count;
            } else {
                length += count - 1;
                hasOdd = true;
            }
        }

        // If there is at least one character with an odd frequency, add one to the length
        if (hasOdd) {
            length += 1;
        }

        return length;
    
    }
}
