class Solution {
    public List<Integer> findSubstring(String s, String[] words) {
    
        List<Integer> result = new ArrayList<>();
        if (s == null || s.length() == 0 || words == null || words.length == 0) {
            return result;
        }

        int wordLength = words[0].length();
        int totalWordsLength = wordLength * words.length;

        Map<String, Integer> wordCounts = new HashMap<>();
        for (String word : words) {
            wordCounts.put(word, wordCounts.getOrDefault(word, 0) + 1);
        }

        for (int i = 0; i <= s.length() - totalWordsLength; i++) {
            String subString = s.substring(i, i + totalWordsLength);
            if (isConcatenated(subString, wordCounts, wordLength)) {
                result.add(i);
            }
        }

        return result;
    }

    private boolean isConcatenated(String subString, Map<String, Integer> wordCounts, int wordLength) {
        Map<String, Integer> subStringCounts = new HashMap<>();
        for (int i = 0; i < subString.length(); i += wordLength) {
            String word = subString.substring(i, i + wordLength);
            subStringCounts.put(word, subStringCounts.getOrDefault(word, 0) + 1);
        }

        return subStringCounts.equals(wordCounts);
    }
        
    }
