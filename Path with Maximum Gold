class Solution {
    public int getMaximumGold(int[][] grid) {
        int maxGold = 0;
        int rows = grid.length;
        int cols = grid[0].length;

        for (int i = 0; i < rows; i++) {
            for (int j = 0; j < cols; j++) {
                if (grid[i][j] != 0) {
                    maxGold = Math.max(maxGold, backtrack(grid, i, j));
                }
            }
        }

        return maxGold;
    }

    private int backtrack(int[][] grid, int row, int col) {
        if (row < 0 || row >= grid.length || col < 0 || col >= grid[0].length || grid[row][col] == 0) {
            return 0;
        }

        int currentGold = grid[row][col];
        grid[row][col] = 0; // Mark cell as visited
        int maxGold = 0;

        // Explore adjacent cells
        maxGold = Math.max(maxGold, backtrack(grid, row + 1, col));
        maxGold = Math.max(maxGold, backtrack(grid, row - 1, col));
        maxGold = Math.max(maxGold, backtrack(grid, row, col + 1));
        maxGold = Math.max(maxGold, backtrack(grid, row, col - 1));

        grid[row][col] = currentGold; // Backtrack: restore cell value
        return currentGold + maxGold;
    }

}
